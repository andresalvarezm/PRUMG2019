CREATE SEQUENCE  SEQ_IDCANAL  MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;
CREATE SEQUENCE  SEQ_IDCLIENTE  MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;
CREATE SEQUENCE  SEQ_IDCOLONIA  MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;
CREATE SEQUENCE  SEQ_IDDEPARTAMENTO  MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;
CREATE SEQUENCE  SEQ_IDDIRECCION  MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;
CREATE SEQUENCE  SEQ_IDEMPLEADO  MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;
CREATE SEQUENCE  SEQ_IDESPECIALIDADES  MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;
CREATE SEQUENCE  SEQ_IDESTADO  MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;
CREATE SEQUENCE  SEQ_NOFACTURA  MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;
CREATE SEQUENCE  SEQ_NO_PAGO  MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;
CREATE SEQUENCE  SEQ_IDMUNICIPIO  MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;
CREATE SEQUENCE  SEQ_IDPAIS  MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;
CREATE SEQUENCE  SEQ_IDPERSONA  MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;
CREATE SEQUENCE  SEQ_IDPRODUCTO  MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;
CREATE SEQUENCE  SEQ_IDPROMO  MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;
CREATE SEQUENCE  SEQ_IDSUCURSAL  MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;
CREATE SEQUENCE  SEQ_IDUSUARIO MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;
CREATE SEQUENCE  SEQ_IDVENTA MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;
CREATE SEQUENCE  SEQ_IDZONA MINVALUE 1 MAXVALUE 9999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE  GLOBAL;

/*==============================================================*/
/* TABLE: BITACORA                                              */
/*==============================================================*/
CREATE TABLE BITACORA (
   FECHA                DATE,
   USUARIO              VARCHAR2(50),
   NOMBRETABLA          VARCHAR(50),
   LLAVE                VARCHAR2(30),
   NOMBRECAMPO          VARCHAR2(50),
   VALORANTERIOR        VARCHAR2(200),
   VALORNUEVO           VARCHAR2(200),
   OBSERVACIONES        VARCHAR2(255)
);

/*==============================================================*/
/* TABLE: CANAL                                                 */
/*==============================================================*/
CREATE TABLE CANAL (
   IDCANAL              NUMBER(14)            NOT NULL,
   NOMBRECANAL          VARCHAR2(255)         CONSTRAINT CANAL_NOMBRECANAL_CC CHECK (NOMBRECANAL IN ('DIRECTO','ENLINEA','TELEFONO')) NOT NULL,
   CREADO               DATE                  NOT NULL,
   CREADO_POR           VARCHAR2(50)          NOT NULL,
   ACTUALIZADO          DATE                  NOT NULL,
   ACTUALIZADO_POR      VARCHAR2(50)          NOT NULL,
   CONSTRAINT PK_CANAL PRIMARY KEY (IDCANAL)
);

COMMENT ON TABLE CANAL IS
'CANAL_DE_SOLICITUD';

/*==============================================================*/
/* TABLE: CLIENTE                                               */
/*==============================================================*/
CREATE TABLE CLIENTE (
   IDCLIENTE            NUMBER(14)            NOT NULL,
   IDPERSONA            NUMBER(14),
   IDESTADO             NUMBER(14),
   CONSTRAINT PK_CLIENTE PRIMARY KEY (IDCLIENTE)
);

/*==============================================================*/
/* TABLE: COLONIA                                               */
/*==============================================================*/
CREATE TABLE COLONIA (
   IDCOLONIA            NUMBER(14)            NOT NULL,
   IDMUNICIPIO          NUMBER(14)            NOT NULL,
   COLONIA              VARCHAR2(50)          NOT NULL,
   CREADO               DATE                  NOT NULL,
   CREADO_POR           VARCHAR2(100)         NOT NULL,
   ACTUALIZADO          DATE                  NOT NULL,
   ACTUALIZADO_POR      VARCHAR2(100)         NOT NULL,
   CONSTRAINT PK_COLONIA PRIMARY KEY (IDCOLONIA)
);

/*==============================================================*/
/* TABLE: DEPARTAMENTO                                          */
/*==============================================================*/
CREATE TABLE DEPARTAMENTO (
   IDDEPARTAMENTO       NUMBER(14)            NOT NULL,
   IDPAIS               NUMBER(14)            NOT NULL,
   DEPARTAMENTO         VARCHAR2(50)          NOT NULL,
   CREADO               DATE                  NOT NULL,
   CREADO_POR           VARCHAR2(100)         NOT NULL,
   ACTUALIZADO          DATE                  NOT NULL,
   ACTUALIZADO_POR      VARCHAR2(100)         NOT NULL,
   CONSTRAINT PK_DEPARTAMENTO PRIMARY KEY (IDDEPARTAMENTO)
);

/*==============================================================*/
/* TABLE: DIRECCION                                             */
/*==============================================================*/
CREATE TABLE DIRECCION (
   IDDIRECCION          NUMBER(14)            NOT NULL,
   IDZONA               NUMBER(14)            NOT NULL,
   IDCOLONIA            NUMBER(14)            NOT NULL,
   IDMUNICIPIO          NUMBER(14)            NOT NULL,
   CALLE_AVENIDA        VARCHAR2(50),
   NUMERO               VARCHAR2(50),
   EDIFICIO             VARCHAR2(50),
   CONSTRAINT PK_DIRECCION PRIMARY KEY (IDDIRECCION)
);

/*==============================================================*/
/* TABLE: DIRECCION_PERSONA                                     */
/*==============================================================*/
CREATE TABLE DIRECCION_PERSONA (
   IDPERSONA            NUMBER(14)            NOT NULL,
   IDDIRECCION          NUMBER(14)            NOT NULL,
   CREADO               DATE                  NOT NULL,
   CREADO_POR           VARCHAR2(100)         NOT NULL,
   ACTUALIZADO          DATE                  NOT NULL,
   ACTUALIZADO_POR      VARCHAR2(100)         NOT NULL
);

/*==============================================================*/
/* TABLE: EMPLEADO                                              */
/*==============================================================*/
CREATE TABLE EMPLEADO (
   FECHAINGRESO         DATE                  NOT NULL,
   IDEMPLEADO           NUMBER(14)            NOT NULL,
   IDPERSONA            NUMBER(14)            NOT NULL,
   IDESTADO             NUMBER(5)             NOT NULL,
   IDESPECIALIDADES     NUMBER(14)            NOT NULL,
   FECHASALIDA          DATE                  NOT NULL,
   CREADO               DATE                  NOT NULL,
   CREADO_POR           VARCHAR2(100)         NOT NULL,
   ACTUALIZADO          DATE                  NOT NULL,
   ACTUALIZADO_POR      VARCHAR2(100)         NOT NULL,
   CONSTRAINT PK_EMPLEADO PRIMARY KEY (IDEMPLEADO)
);

/*==============================================================*/
/* TABLE: ESPECIALIDADES                                        */
/*==============================================================*/
CREATE TABLE ESPECIALIDADES (
   IDESPECIALIDADES     NUMBER(14)            NOT NULL,
   ESPECIALIDADES       VARCHAR2(50)          NOT NULL,
   CREADO               DATE                  NOT NULL,
   CREADO_POR           VARCHAR2(100)         NOT NULL,
   ACTUALIZADO          DATE                  NOT NULL,
   ACTUALIZADO_POR      VARCHAR2(100)         NOT NULL,
   CONSTRAINT PK_ESPECIALIDADES PRIMARY KEY (IDESPECIALIDADES)
);

/*==============================================================*/
/* TABLE: ESTADO                                                */
/*==============================================================*/
CREATE TABLE ESTADO (
   IDESTADO             NUMBER(14)            NOT NULL,
   ESTADO               VARCHAR2(50)          NOT NULL,
   CREADO               DATE                  NOT NULL,
   CREADO_POR           VARCHAR2(100)         NOT NULL,
   ACTUALIZADO          DATE                  NOT NULL,
   ACTUALIZADO_POR      VARCHAR2(100)         NOT NULL,
   CONSTRAINT PK_ESTADO PRIMARY KEY (IDESTADO)
);

/*==============================================================*/
/* TABLE: FACTURA                                               */
/*==============================================================*/
CREATE TABLE FACTURA (
   NOFACTURA            NUMBER(14)            NOT NULL,
   IDVENTA              NUMBER(14)            NOT NULL,
   NO_PAGO              NUMBER(14)            NOT NULL,
   FECHA                DATE                  NOT NULL,
   CREADO_POR           VARCHAR2(50)          NOT NULL,
   ACTUALIZADO          DATE                  NOT NULL,
   ACTUALIZADO_POR      VARCHAR2(50)          NOT NULL,
   CONSTRAINT PK_FACTURA PRIMARY KEY (NOFACTURA)
);

/*==============================================================*/
/* TABLE: MODO_PAGO                                             */
/*==============================================================*/
CREATE TABLE MODO_PAGO (
   NO_PAGO              NUMBER(14)            NOT NULL,
   NOMBRE               VARCHAR2(50)          NOT NULL,
   OTRODETALLE          VARCHAR2(100)         NOT NULL,
   CONSTRAINT PK_MODO_PAGO PRIMARY KEY (NO_PAGO)
);

/*==============================================================*/
/* TABLE: MUNICIPIO                                             */
/*==============================================================*/
CREATE TABLE MUNICIPIO (
   IDMUNICIPIO          NUMBER(14)            NOT NULL,
   IDDEPARTAMENTO       NUMBER(14)            NOT NULL,
   IDPAIS               NUMBER(14)            NOT NULL,
   MUNICIPIO            VARCHAR2(50)          NOT NULL,
   CREADO               DATE                  NOT NULL,
   CREADO_POR           VARCHAR2(100)         NOT NULL,
   ACTUALIZADO          DATE                  NOT NULL,
   ACTUALIZADO_POR      VARCHAR2(100)         NOT NULL,
   CONSTRAINT PK_MUNICIPIO PRIMARY KEY (IDMUNICIPIO)
);

/*==============================================================*/
/* TABLE: PAIS                                                  */
/*==============================================================*/
CREATE TABLE PAIS (
   IDPAIS               NUMBER(14)            NOT NULL,
   PAIS                 VARCHAR2(50)          NOT NULL,
   CREADO               DATE                  NOT NULL,
   CREADO_POR           VARCHAR2(100)         NOT NULL,
   ACTUALIZADO          DATE                  NOT NULL,
   ACTUALIZADO_POR      VARCHAR2(100)         NOT NULL,
   CONSTRAINT PK_PAIS PRIMARY KEY (IDPAIS)
);

/*==============================================================*/
/* TABLE: PERSONA                                               */
/*==============================================================*/
CREATE TABLE PERSONA (
   IDPERSONA            NUMBER(14)            NOT NULL,
   NOMBRE1              VARCHAR2(60)          NOT NULL,
   NOMBRE2              VARCHAR2(60)          NOT NULL,
   NOMBRE3              VARCHAR2(60),
   APELLIDO1            VARCHAR2(60)          NOT NULL,
   APELLIDO2            VARCHAR2(60),
   APECASADA            VARCHAR2(60),
   FECHA_NACIMIENTO     DATE,
   GENERO               VARCHAR2(1)           CONSTRAINT PERSONA_GENERO_CC CHECK (GENERO IN ('MASCULINO','FEMENINO')) NOT NULL,  
   TELEFONO             NUMBER(8),
   EMAIL                VARCHAR2(60),
   ESTADOCIVIL          VARCHAR2(20)          NOT NULL,
   DPI                  VARCHAR2(20)          NOT NULL,
   NIT                  VARCHAR2(20)          NOT NULL,
   CREADO               DATE                  NOT NULL,
   CREADO_POR           VARCHAR2(50)          NOT NULL,
   ACTUALIZADO          DATE                  NOT NULL,
   ACTUALIZADO_POR      VARCHAR2(50)          NOT NULL,
   CONSTRAINT PK_PERSONA PRIMARY KEY (IDPERSONA)
);

/*==============================================================*/
/* TABLE: PRODUCTO                                              */
/*==============================================================*/
CREATE TABLE PRODUCTO (
   IDPRODUCTO           NUMBER(14)            NOT NULL,
   NOMBREPRODUCTO       VARCHAR2(50)          NOT NULL,
   STOCK                NUMBER(14)            NOT NULL,
   DESCRIPCION          VARCHAR2(200)         NOT NULL,
   SKU                  VARCHAR2(30)          NOT NULL,
   UNIDAD               NUMBER(14)            NOT NULL,
   PRECIOUNIDAD         NUMBER(14,2)          NOT NULL,
   CONSTRAINT PK_PRODUCTO PRIMARY KEY (IDPRODUCTO)
);

/*==============================================================*/
/* TABLE: PROMOCION                                             */
/*==============================================================*/
CREATE TABLE PROMOCION (
   IDPROMO              NUMBER(14)            NOT NULL,
   NOMBREPROMO          VARCHAR2(100)         NOT NULL,
   CODIGO               VARCHAR2(10)          NOT NULL,
   FECHAINICIO          DATE                  NOT NULL,
   FECHAFIN             DATE                  NOT NULL,
   PRORCEPROMO          VARCHAR2(50)          NOT NULL,
   CREADO               DATE                  NOT NULL,
   CREADO_POR           VARCHAR2(50)          NOT NULL,
   ACTUALIZADO          DATE                  NOT NULL,
   ACTUALIZADO_POR      VARCHAR2(50)          NOT NULL,
   CONSTRAINT PK_PROMOCION PRIMARY KEY (IDPROMO)
);

/*==============================================================*/
/* TABLE: SUCURSAL                                              */
/*==============================================================*/
CREATE TABLE SUCURSAL (
   IDSUCURSAL           NUMBER(14)            NOT NULL,
   SUCURSAL             VARCHAR2(100)         NOT NULL,
   CREADO               DATE                  NOT NULL,
   CREADO_POR           VARCHAR2(50)          NOT NULL,
   ACTUALIZADO          DATE                  NOT NULL,
   ACTUALIZADO_POR      VARCHAR2(50)          NOT NULL,
   CONSTRAINT PK_SUCURSAL PRIMARY KEY (IDSUCURSAL)
);

/*==============================================================*/
/* TABLE: USUARIO                                               */
/*==============================================================*/
CREATE TABLE USUARIO (
   IDUSUARIO            NUMBER(14)            NOT NULL,
   IDEMPLEADO           NUMBER(14)            NOT NULL,
   IDSUCURSAL           NUMBER(14)            NOT NULL,
   USUARIO              VARCHAR2(50)          NOT NULL,
   PW                   VARCHAR2(50)          NOT NULL,
   CONSTRAINT PK_USUARIO PRIMARY KEY (IDUSUARIO)
);

/*==============================================================*/
/* TABLE: VENTA                                                 */
/*==============================================================*/
CREATE TABLE VENTA (
   IDVENTA              NUMBER(14)            NOT NULL,
   IDPRODUCTO           NUMBER(14)            NOT NULL,
   IDPROMO              NUMBER(14)            NOT NULL,
   IDCANAL              NUMBER(14)            NOT NULL,
   IDCLIENTE            NUMBER(14)            NOT NULL,
   FECHAVENTA           DATE                  NOT NULL,
   CANTIDAD             NUMBER(14)            NOT NULL,
   PRECIOUNIDAD         NUMBER(14,2)          NOT NULL,
   CREADO               DATE                  NOT NULL,
   CREADO_POR           VARCHAR2(50)          NOT NULL,
   ACTUALIZADO          DATE                  NOT NULL,
   ACTUALIZADO_POR      VARCHAR2(50)          NOT NULL,
   CONSTRAINT PK_VENTA PRIMARY KEY (IDVENTA)
);

/*==============================================================*/
/* TABLE: ZONA                                                  */
/*==============================================================*/
CREATE TABLE ZONA (
   IDZONA               NUMBER(14)            NOT NULL,
   IDMUNICIPIO          NUMBER(14)            NOT NULL,
   ZONA                 NUMBER(5)             NOT NULL,
   CREADO               DATE                  NOT NULL,
   CREADO_POR           VARCHAR2(100)         NOT NULL,
   ACTUALIZADO          DATE                  NOT NULL,
   ACTUALIZADO_POR      VARCHAR2(100)         NOT NULL,
   CONSTRAINT PK_ZONA PRIMARY KEY (IDZONA)
);

ALTER TABLE CLIENTE
   ADD CONSTRAINT FK_CLIENTE_REFERENCE_PERSONA FOREIGN KEY (IDPERSONA)
      REFERENCES PERSONA (IDPERSONA);

ALTER TABLE CLIENTE
   ADD CONSTRAINT FK_CLIENTE_REFERENCE_ESTADO FOREIGN KEY (IDESTADO)
      REFERENCES ESTADO (IDESTADO);

ALTER TABLE COLONIA
   ADD CONSTRAINT FK_COLONIA_REFERENCE_MUNICIPI FOREIGN KEY (IDMUNICIPIO)
      REFERENCES MUNICIPIO (IDMUNICIPIO);

ALTER TABLE DEPARTAMENTO
   ADD CONSTRAINT FK_DEPARTAM_REFERENCE_PAIS FOREIGN KEY (IDPAIS)
      REFERENCES PAIS (IDPAIS);

ALTER TABLE DIRECCION
   ADD CONSTRAINT FK_DIRECCIO_REFERENCE_COLONIA FOREIGN KEY (IDCOLONIA)
      REFERENCES COLONIA (IDCOLONIA);

ALTER TABLE DIRECCION
   ADD CONSTRAINT FK_DIRECCIO_REFERENCE_MUNICIPI FOREIGN KEY (IDMUNICIPIO)
      REFERENCES MUNICIPIO (IDMUNICIPIO);

ALTER TABLE DIRECCION
   ADD CONSTRAINT FK_DIRECCIO_REFERENCE_ZONA FOREIGN KEY (IDZONA)
      REFERENCES ZONA (IDZONA);

ALTER TABLE DIRECCION_PERSONA
   ADD CONSTRAINT FK_DIRECCIO_REFERENCE_DIRECCIO FOREIGN KEY (IDDIRECCION)
      REFERENCES DIRECCION (IDDIRECCION);

ALTER TABLE DIRECCION_PERSONA
   ADD CONSTRAINT FK_DIRECCIO_REFERENCE_PERSONA FOREIGN KEY (IDPERSONA)
      REFERENCES PERSONA (IDPERSONA);

ALTER TABLE EMPLEADO
   ADD CONSTRAINT FK_EMPLEADO_REFERENCE_ESPECIAL FOREIGN KEY (IDESPECIALIDADES)
      REFERENCES ESPECIALIDADES (IDESPECIALIDADES);

ALTER TABLE EMPLEADO
   ADD CONSTRAINT FK_EMPLEADO_REFERENCE_ESTADO FOREIGN KEY (IDESTADO)
      REFERENCES ESTADO (IDESTADO);

ALTER TABLE EMPLEADO
   ADD CONSTRAINT FK_EMPLEADO_REFERENCE_PERSONA FOREIGN KEY (IDPERSONA)
      REFERENCES PERSONA (IDPERSONA);

ALTER TABLE FACTURA
   ADD CONSTRAINT FK_FACTURA_REFERENCE_VENTA FOREIGN KEY (IDVENTA)
      REFERENCES VENTA (IDVENTA);

ALTER TABLE FACTURA
   ADD CONSTRAINT FK_FACTURA_REFERENCE_MODO_PAG FOREIGN KEY (NO_PAGO)
      REFERENCES MODO_PAGO (NO_PAGO);

ALTER TABLE MUNICIPIO
   ADD CONSTRAINT FK_MUNICIPI_REFERENCE_DEPARTAM FOREIGN KEY (IDDEPARTAMENTO)
      REFERENCES DEPARTAMENTO (IDDEPARTAMENTO);

ALTER TABLE MUNICIPIO
   ADD CONSTRAINT FK_MUNICIPI_REFERENCE_PAIS FOREIGN KEY (IDPAIS)
      REFERENCES PAIS (IDPAIS);

ALTER TABLE USUARIO
   ADD CONSTRAINT FK_USUARIO_REFERENCE_EMPLEADO FOREIGN KEY (IDEMPLEADO)
      REFERENCES EMPLEADO (IDEMPLEADO);

ALTER TABLE USUARIO
   ADD CONSTRAINT FK_USUARIO_REFERENCE_SUCURSAL FOREIGN KEY (IDSUCURSAL)
      REFERENCES SUCURSAL (IDSUCURSAL);

ALTER TABLE VENTA
   ADD CONSTRAINT FK_VENTA_REFERENCE_PRODUCTO FOREIGN KEY (IDPRODUCTO)
      REFERENCES PRODUCTO (IDPRODUCTO);

ALTER TABLE VENTA
   ADD CONSTRAINT FK_VENTA_REFERENCE_PROMOCIO FOREIGN KEY (IDPROMO)
      REFERENCES PROMOCION (IDPROMO);

ALTER TABLE VENTA
   ADD CONSTRAINT FK_VENTA_REFERENCE_CANAL FOREIGN KEY (IDCANAL)
      REFERENCES CANAL (IDCANAL);

ALTER TABLE VENTA
   ADD CONSTRAINT FK_VENTA_REFERENCE_CLIENTE FOREIGN KEY (IDCLIENTE)
      REFERENCES CLIENTE (IDCLIENTE);

ALTER TABLE ZONA
   ADD CONSTRAINT FK_ZONA_REFERENCE_MUNICIPI FOREIGN KEY (IDMUNICIPIO)
      REFERENCES MUNICIPIO (IDMUNICIPIO);
	  
/*==============================================================*/
/* TRIGGER: CANAL                                               */
/*==============================================================*/

/* SECUENCIA DE PK TABLA CANAL*/
CREATE TRIGGER TRG_BIR_CANAL 
BEFORE INSERT ON CANAL
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES_IDCANAL>>
  BEGIN
    IF INSERTING AND :NEW.IDCANAL IS NULL THEN
      SELECT SEQ_IDCANAL.NEXTVAL INTO :NEW.IDCANAL FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END TRG_BIR_CANAL;

/* SEGURIDAD DE LA TABLA CANAL*/
CREATE TRIGGER TRG_BIU_CANAL
BEFORE INSERT OR UPDATE ON CANAL
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.CREADO := SYSDATE;
        :NEW.CREADO_POR := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),USER);
    END IF;
    :NEW.ACTUALIZADO := SYSDATE;
    :NEW.ACTUALIZADO_POR := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),USER);
END TRG_BIU_CANAL;

/* SEGURIDAD GLOBAL POR VALORES DE ACTUALIZACION TABLA CANAL*/
CREATE OR REPLACE TRIGGER TRG_BUR_CANAL
BEFORE UPDATE ON CANAL
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'CANAL', :OLD.IDCANAL, 'NOMBRECANAL', :OLD.NOMBRECANAL, :NEW.NOMBRECANAL);
END TRG_BUR_CANAL;

CREATE OR REPLACE TRIGGER TRG_BDR_CANAL
BEFORE DELETE ON CANAL
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'CANAL', :OLD.IDCANAL, 'IDCANAL', :OLD.IDCANAL, NULL, 'VALOR ELIMINADO');
    INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
    VALUES (SYSDATE, USER, 'CANAL', :OLD.IDCANAL, 'NOMBRECANAL', :OLD.NOMBRECANAL, NULL, 'VALOR ELIMINADO');	
END TRG_BDR_CANAL;

/*==============================================================*/
/* TRIGGER: CLIENTE                                             */
/*==============================================================*/

/* SECUENCIA DE PK TABLA CLIENTE*/
CREATE TRIGGER TRG_BIR_CLIENTE 
BEFORE INSERT ON CLIENTE
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES_IDCLIENTE>>
  BEGIN
    IF INSERTING AND :NEW.IDCLIENTE IS NULL THEN
      SELECT SEQ_IDCLIENTE.NEXTVAL INTO :NEW.IDCLIENTE FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END TRG_BIR_CLIENTE;

/* SEGURIDAD GLOBAL POR VALORES DE ACTUALIZACION TABLA CLIENTE*/
CREATE OR REPLACE TRIGGER TRG_BUR_CLIENTE
BEFORE UPDATE ON CLIENTE
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'CLIENTE', :OLD.IDCLIENTE, 'IDPERSONA', :OLD.IDPERSONA, :NEW.IDPERSONA);
END TRG_BUR_CLIENTE;

CREATE OR REPLACE TRIGGER TRG_BDR_CLIENTE
BEFORE DELETE ON CLIENTE
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'CLIENTE', :OLD.IDCLIENTE, 'IDCLIENTE', :OLD.IDCLIENTE, NULL, 'VALOR ELIMINADO');
    INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
    VALUES (SYSDATE, USER, 'CLIENTE', :OLD.IDCLIENTE, 'IDPERSONA', :OLD.IDPERSONA, NULL, 'VALOR ELIMINADO');	
END TRG_BDR_CLIENTE;

/*==============================================================*/
/* TRIGGER: COLONIA                                             */
/*==============================================================*/

/* SECUENCIA DE PK TABLA COLONIA*/
CREATE TRIGGER TRG_BIR_COLONIA 
BEFORE INSERT ON COLONIA
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES_IDCOLONIA>>
  BEGIN
    IF INSERTING AND :NEW.IDCOLONIA IS NULL THEN
      SELECT SEQ_IDCOLONIA.NEXTVAL INTO :NEW.IDCOLONIA FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END TRG_BIR_COLONIA;

/* SEGURIDAD DE LA TABLA COLONIA*/
CREATE TRIGGER TRG_BIU_COLONIA
BEFORE INSERT OR UPDATE ON COLONIA
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.CREADO := SYSDATE;
        :NEW.CREADO_POR := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),USER);
    END IF;
    :NEW.ACTUALIZADO := SYSDATE;
    :NEW.ACTUALIZADO_POR := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),USER);
END TRG_BIU_COLONIA;

/* SEGURIDAD GLOBAL POR VALORES DE ACTUALIZACION TABLA COLONIA*/
CREATE OR REPLACE TRIGGER TRG_BUR_COLONIA
BEFORE UPDATE ON COLONIA
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'COLONIA', :OLD.IDCOLONIA, 'COLONIA', :OLD.COLONIA, :NEW.COLONIA);
END TRG_BUR_COLONIA;

CREATE OR REPLACE TRIGGER TRG_BDR_COLONIA
BEFORE DELETE ON COLONIA
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'COLONIA', :OLD.IDCOLONIA, 'IDCOLONIA', :OLD.IDCOLONIA, NULL, 'VALOR ELIMINADO');
    INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
    VALUES (SYSDATE, USER, 'COLONIA', :OLD.IDCOLONIA, 'IDMUNICIPIO', :OLD.IDMUNICIPIO, NULL, 'VALOR ELIMINADO');	
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
    VALUES (SYSDATE, USER, 'COLONIA', :OLD.IDCOLONIA, 'COLONIA', :OLD.COLONIA, NULL, 'VALOR ELIMINADO');
END TRG_BDR_COLONIA;



/*==============================================================*/
/* TRIGGER: DEPARTAMENTO                                        */
/*==============================================================*/

/* SECUENCIA DE PK TABLA DEPARTAMENTO*/
CREATE TRIGGER TRG_BIR_DEPARTAMENTO 
BEFORE INSERT ON DEPARTAMENTO
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES_IDDEPARTAMENTO>>
  BEGIN
    IF INSERTING AND :NEW.IDDEPARTAMENTO IS NULL THEN
      SELECT SEQ_IDDEPARTAMENTO.NEXTVAL INTO :NEW.IDDEPARTAMENTO FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END TRG_BIR_DEPARTAMENTO;

/* SEGURIDAD DE LA TABLA DEPARTAMENTO*/
CREATE TRIGGER TRG_BIU_DEPARTAMENTO
BEFORE INSERT OR UPDATE ON DEPARTAMENTO
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.CREADO := SYSDATE;
        :NEW.CREADO_POR := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),USER);
    END IF;
    :NEW.ACTUALIZADO := SYSDATE;
    :NEW.ACTUALIZADO_POR := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),USER);
END TRG_BIU_DEPARTAMENTO;

/* SEGURIDAD GLOBAL POR VALORES DE ACTUALIZACION TABLA DEPARTAMENTO*/
CREATE OR REPLACE TRIGGER TRG_BUR_DEPARTAMENTO
BEFORE UPDATE ON DEPARTAMENTO
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'DEPARTAMENTO', :OLD.IDDEPARTAMENTO, 'DEPARTAMENTO', :OLD.DEPARTAMENTO, :NEW.DEPARTAMENTO);
END TRG_BUR_DEPARTAMENTO;

CREATE OR REPLACE TRIGGER TRG_BDR_DEPARTAMENTO
BEFORE DELETE ON DEPARTAMENTO
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'DEPARTAMENTO', :OLD.IDDEPARTAMENTO, 'IDDEPARTAMENTO', :OLD.IDDEPARTAMENTO, NULL, 'VALOR ELIMINADO');
    INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
    VALUES (SYSDATE, USER, 'DEPARTAMENTO', :OLD.IDDEPARTAMENTO, 'IDPAIS', :OLD.IDPAIS, NULL, 'VALOR ELIMINADO');	
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
    VALUES (SYSDATE, USER, 'DEPARTAMENTO', :OLD.IDDEPARTAMENTO, 'DEPARTAMENTO', :OLD.DEPARTAMENTO, NULL, 'VALOR ELIMINADO');
END TRG_BDR_DEPARTAMENTO;


/*==============================================================*/
/* TRIGGER: DIRECCION                                       */
/*==============================================================*/

/* SECUENCIA DE PK TABLA DIRECCION*/
CREATE TRIGGER TRG_BIR_DIRECCION
BEFORE INSERT ON DIRECCION
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES_IDDIRECCION>>
  BEGIN
    IF INSERTING AND :NEW.IDDIRECCIONIS NULL THEN
      SELECT SEQ_IDDIRECCION.NEXTVAL INTO :NEW.IDDIRECCIONFROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END TRG_BIR_DIRECCION;

/* SEGURIDAD GLOBAL POR VALORES DE ACTUALIZACION TABLA DIRECCION*/
CREATE OR REPLACE TRIGGER TRG_BUR_DIRECCION
BEFORE UPDATE ON DIRECCION
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'DIRECCION', :OLD.IDDIRECCION, 'CALLE_AVENIDA', :OLD.CALLE_AVENIDA, :NEW.CALLE_AVENIDA);
END TRG_BUR_DIRECCION;

CREATE OR REPLACE TRIGGER TRG_BDR_DIRECCION
BEFORE DELETE ON DIRECCION
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'DIRECCION', :OLD.IDDIRECCION, 'IDDIRECCION', :OLD.IDDIRECCION, NULL, 'VALOR ELIMINADO');
    INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
    VALUES (SYSDATE, USER, 'DIRECCION', :OLD.IDDIRECCION, 'IDZONA', :OLD.IDZONA, NULL, 'VALOR ELIMINADO');	
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
    VALUES (SYSDATE, USER, 'DIRECCION', :OLD.IDDIRECCION, 'IDCOLONIA', :OLD.IDCOLONIA, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
    VALUES (SYSDATE, USER, 'DIRECCION', :OLD.IDDIRECCION, 'IDMUNICIPIO', :OLD.IDMUNICIPIO, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
    VALUES (SYSDATE, USER, 'DIRECCION', :OLD.IDDIRECCION, 'CALLE_AVENIDA', :OLD.CALLE_AVENIDA, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
    VALUES (SYSDATE, USER, 'DIRECCION', :OLD.IDDIRECCION, 'NUMERO', :OLD.NUMERO, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
    VALUES (SYSDATE, USER, 'DIRECCION', :OLD.IDDIRECCION, 'EDIFICIO', :OLD.EDIFICIO, NULL, 'VALOR ELIMINADO');
END TRG_BDR_DIRECCION;

/*==============================================================*/
/* TRIGGER: EMPLEADO                                            */
/*==============================================================*/

/* SECUENCIA DE PK TABLA EMPLEADO*/
CREATE TRIGGER TRG_BIR_EMPLEADO
BEFORE INSERT ON EMPLEADO
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES_IDEMPLEADO>>
  BEGIN
    IF INSERTING AND :NEW.IDEMPLEADO IS NULL THEN
      SELECT SEQ_IDEMPLEADO.NEXTVAL INTO :NEW.IDEMPLEADO FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END TRG_BIR_EMPLEADO;

/* SEGURIDAD DE LA TABLA EMPLEADO*/
CREATE TRIGGER TRG_BIU_EMPLEADO
BEFORE INSERT OR UPDATE ON EMPLEADO
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.CREADO := SYSDATE;
        :NEW.CREADO_POR := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),USER);
    END IF;
    :NEW.ACTUALIZADO := SYSDATE;
    :NEW.ACTUALIZADO_POR := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),USER);
END TRG_BIU_EMPLEADO;

/* SEGURIDAD GLOBAL POR VALORES DE ACTUALIZACION TABLA EMPLEADO*/
CREATE OR REPLACE TRIGGER TRG_BUR_EMPLEADO
BEFORE UPDATE ON EMPLEADO
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'EMPLEADO', :OLD.IDEMPLEADO, 'FECHAINGRESO', :OLD.FECHAINGRESO, :NEW.FECHAINGRESO);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'EMPLEADO', :OLD.IDEMPLEADO, 'IDPERSONA', :OLD.IDPERSONA, :NEW.IDPERSONA);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'EMPLEADO', :OLD.IDEMPLEADO, 'IDESTADO', :OLD.IDESTADO, :NEW.IDESTADO);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'EMPLEADO', :OLD.IDEMPLEADO, 'IDESPECIALIDADES', :OLD.IDESPECIALIDADES, :NEW.IDESPECIALIDADES);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'EMPLEADO', :OLD.IDEMPLEADO, 'FECHASALIDA', :OLD.FECHASALIDA, :NEW.FECHASALIDA);	
END TRG_BUR_EMPLEADO;

REATE OR REPLACE TRIGGER TRG_BDR_EMPLEADO
BEFORE DELETE ON EMPLEADO
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'EMPLEADO', :OLD.IDEMPLEADO, 'FECHAINGRESO', :OLD.FECHAINGRESO, NULL);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'EMPLEADO', :OLD.IDEMPLEADO, 'IDPERSONA', :OLD.IDPERSONA, NULL);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'EMPLEADO', :OLD.IDEMPLEADO, 'IDESTADO', :OLD.IDESTADO, NULL);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'EMPLEADO', :OLD.IDEMPLEADO, 'IDESPECIALIDADES', :OLD.IDESPECIALIDADES, NULL);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'EMPLEADO', :OLD.IDEMPLEADO, 'FECHASALIDA', :OLD.FECHASALIDA, NULL);	
END TRG_BDR_EMPLEADO;

/*==============================================================*/
/* TRIGGER: ESPECIALIDADES                                      */
/*==============================================================*/

/* SECUENCIA DE PK TABLA ESPECIALIDADES*/
CREATE TRIGGER TRG_BIR_ESPECIALIDADES
BEFORE INSERT ON ESPECIALIDADES
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES_IDESPECIALIDADES>>
  BEGIN
    IF INSERTING AND :NEW.IDESPECIALIDADES IS NULL THEN
      SELECT SEQ_IDESPECIALIDADES.NEXTVAL INTO :NEW.IDESPECIALIDADES FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END TRG_BIR_ESPECIALIDADES;

/* SEGURIDAD DE LA TABLA ESPECIALIDADES*/
CREATE TRIGGER TRG_BIU_ESPECIALIDADES
BEFORE INSERT OR UPDATE ON ESPECIALIDADES
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.CREADO := SYSDATE;
        :NEW.CREADO_POR := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),USER);
    END IF;
    :NEW.ACTUALIZADO := SYSDATE;
    :NEW.ACTUALIZADO_POR := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),USER);
END TRG_BIU_ESPECIALIDADES;

/* SEGURIDAD GLOBAL POR VALORES DE ACTUALIZACION TABLA ESPECIALIDADES*/
CREATE OR REPLACE TRIGGER TRG_BUR_ESPECIALIDADES
BEFORE UPDATE ON ESPECIALIDADES
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'ESPECIALIDADES', :OLD.IDESPECIALIDADES, 'ESPECIALIDADES', :OLD.ESPECIALIDADES, :NEW.ESPECIALIDADES);
END TRG_BUR_ESPECIALIDADES;

CREATE OR REPLACE TRIGGER TRG_BDR_ESPECIALIDADES
BEFORE DELETE ON ESPECIALIDADES
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'ESPECIALIDADES', :OLD.IDESPECIALIDADES, 'IDESPECIALIDADES', :OLD.IDESPECIALIDADES, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'ESPECIALIDADES', :OLD.IDESPECIALIDADES, 'ESPECIALIDADES', :OLD.ESPECIALIDADES, NULL, 'VALOR ELIMINADO');	
END TRG_BDR_ESPECIALIDADES;

**************************************************************------------------------------------------------------

/*==============================================================*/
/* TRIGGER: ESTADO                                              */
/*==============================================================*/

/* SECUENCIA DE PK TABLA ESTADO*/
CREATE TRIGGER TRG_BIR_ESTADO
BEFORE INSERT ON ESTADO
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES_IDESTADO>>
  BEGIN
    IF INSERTING AND :NEW.IDESTADO IS NULL THEN
      SELECT SEQ_IDESTADO.NEXTVAL INTO :NEW.IDESTADO FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END TRG_BIR_ESTADO;

/* SEGURIDAD DE LA TABLA ESTADO*/
CREATE TRIGGER TRG_BIU_ESTADO
BEFORE INSERT OR UPDATE ON ESTADO
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.CREADO := SYSDATE;
        :NEW.CREADO_POR := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),USER);
    END IF;
    :NEW.ACTUALIZADO := SYSDATE;
    :NEW.ACTUALIZADO_POR := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),USER);
END TRG_BIU_ESTADO;

/* SEGURIDAD GLOBAL POR VALORES DE ACTUALIZACION TABLA ESTADO*/
CREATE OR REPLACE TRIGGER TRG_BUR_ESTADO
BEFORE UPDATE ON ESTADO
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'ESTADO', :OLD.IDESTADO, 'ESTADO', :OLD.ESTADO, :NEW.ESTADO);
END TRG_BUR_ESTADO;

CREATE OR REPLACE TRIGGER TRG_BDR_ESTADO
BEFORE DELETE ON ESTADO
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'ESTADO', :OLD.IDESTADO, 'IDESTADO', :OLD.IDESTADO, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'ESTADO', :OLD.IDESTADO, 'ESTADO', :OLD.ESTADO, NULL, 'VALOR ELIMINADO');	
END TRG_BDR_ESTADO;

/*==============================================================*/
/* TRIGGER: FACTURA                                             */
/*==============================================================*/

/* SECUENCIA DE PK TABLA FACTURA*/
CREATE TRIGGER TRG_BIR_FACTURA
BEFORE INSERT ON FACTURA
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES_IDFACTURA>>
  BEGIN
    IF INSERTING AND :NEW.NOFACTURA IS NULL THEN
      SELECT SEQ_NOFACTURA.NEXTVAL INTO :NEW.NOFACTURA FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END TRG_BIR_FACTURA;

/* SEGURIDAD DE LA TABLA FACTURA*/
CREATE TRIGGER TRG_BIU_FACTURA
BEFORE INSERT OR UPDATE ON FACTURA
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW
BEGIN
    IF INSERTING THEN
        :NEW.CREADO_POR := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),USER);
    END IF;
    :NEW.ACTUALIZADO := SYSDATE;
    :NEW.ACTUALIZADO_POR := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),USER);
END TRG_BIU_FACTURA;

/* SEGURIDAD GLOBAL POR VALORES DE ACTUALIZACION TABLA FACTURA*/
CREATE OR REPLACE TRIGGER TRG_BUR_FACTURA
BEFORE UPDATE ON FACTURA
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'FACTURA', :OLD.NOFACTURA, 'IDVENTA', :OLD.IDVENTA, :NEW.IDVENTA);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'FACTURA', :OLD.NOFACTURA, 'NO_PAGO', :OLD.NO_PAGO, :NEW.NO_PAGO);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'FACTURA', :OLD.NOFACTURA, 'FECHA', :OLD.FECHA, :NEW.FECHA);	
END TRG_BUR_FACTURA;

CREATE OR REPLACE TRIGGER TRG_BDR_FACTURA
BEFORE DELETE ON FACTURA
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'FACTURA', :OLD.NOFACTURA, 'NOFACTURA', :OLD.NOFACTURA, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'FACTURA', :OLD.NOFACTURA, 'IDVENTA', :OLD.IDVENTA, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'FACTURA', :OLD.NOFACTURA, 'NO_PAGO', :OLD.NO_PAGO, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'FACTURA', :OLD.NOFACTURA, 'FECHA', :OLD.FECHA, NULL, 'VALOR ELIMINADO');
END TRG_BDR_FACTURA;

/*==============================================================*/
/* TRIGGER: MODO_PAGO                                           */
/*==============================================================*/

/* SECUENCIA DE PK TABLA MODO_PAGO*/
CREATE TRIGGER TRG_BIR_MODO_PAGO
BEFORE INSERT ON MODO_PAGO
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES_IDMODO_PAGO>>
  BEGIN
    IF INSERTING AND :NEW.NO_PAGO IS NULL THEN
      SELECT SEQ_NO_PAGO.NEXTVAL INTO :NEW.NO_PAGO FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END TRG_BIR_MODO_PAGO;

/* SEGURIDAD GLOBAL POR VALORES DE ACTUALIZACION TABLA MODO_PAGO*/
CREATE OR REPLACE TRIGGER TRG_BUR_MODO_PAGO
BEFORE UPDATE ON MODO_PAGO
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'MODO_PAGO', :OLD.NO_PAGO, 'NOMBRE', :OLD.NOMBRE, :NEW.NOMBRE);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'MODO_PAGO', :OLD.NO_PAGO, 'OTRODETALLE', :OLD.OTRODETALLE, :NEW.OTRODETALLE);
END TRG_BUR_MODO_PAGO;

CREATE OR REPLACE TRIGGER TRG_BDR_MODO_PAGO
BEFORE DELETE ON MODO_PAGO
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'MODO_PAGO', :OLD.NO_PAGO, 'NO_PAGO', :OLD.NO_PAGO, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'MODO_PAGO', :OLD.NO_PAGO, 'NOMBRE', :OLD.NOMBRE, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'MODO_PAGO', :OLD.NO_PAGO, 'OTRODETALLE', :OLD.OTRODETALLE, NULL, 'VALOR ELIMINADO');
END TRG_BDR_MODO_PAGO;

/*==============================================================*/
/* TRIGGER: MUNICIPIO                                           */
/*==============================================================*/

/* SECUENCIA DE PK TABLA MUNICIPIO*/
CREATE TRIGGER TRG_BIR_MUNICIPIO
BEFORE INSERT ON MUNICIPIO
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES_IDMUNICIPIO>>
  BEGIN
    IF INSERTING AND :NEW.IDMUNICIPIO IS NULL THEN
      SELECT SEQ_IDMUNICIPIO.NEXTVAL INTO :NEW.IDMUNICIPIO FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END TRG_BIR_MUNICIPIO;

/* SEGURIDAD DE LA TABLA MUNICIPIO*/
CREATE TRIGGER TRG_BIU_MUNICIPIO
BEFORE INSERT OR UPDATE ON MUNICIPIO
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW
BEGIN
    IF INSERTING THEN
		:NEW.CREADO := SYSDATE;
        :NEW.CREADO_POR := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),USER);
    END IF;
    :NEW.ACTUALIZADO := SYSDATE;
    :NEW.ACTUALIZADO_POR := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),USER);
END TRG_BIU_MUNICIPIO;

/* SEGURIDAD GLOBAL POR VALORES DE ACTUALIZACION TABLA MUNICIPIO*/
CREATE OR REPLACE TRIGGER TRG_BUR_MUNICIPIO
BEFORE UPDATE ON MUNICIPIO
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'MUNICIPIO', :OLD.IDMUNICIPIO, 'IDDEPARTAMENTO', :OLD.IDDEPARTAMENTO, :NEW.IDDEPARTAMENTO);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'MUNICIPIO', :OLD.IDMUNICIPIO, 'IDPAIS', :OLD.IDPAIS, :NEW.IDPAIS);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'MUNICIPIO', :OLD.IDMUNICIPIO, 'MUNICIPIO', :OLD.MUNICIPIO, :NEW.MUNICIPIO);
END TRG_BUR_MUNICIPIO;

CREATE OR REPLACE TRIGGER TRG_BDR_MUNICIPIO
BEFORE DELETE ON MUNICIPIO
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'MUNICIPIO', :OLD.IDMUNICIPIO, 'IDMUNICIPIO', :OLD.IDMUNICIPIO, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'MUNICIPIO', :OLD.IDMUNICIPIO, 'IDDEPARTAMENTO', :OLD.IDDEPARTAMENTO, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'MUNICIPIO', :OLD.IDMUNICIPIO, 'IDPAIS', :OLD.IDPAIS, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'MUNICIPIO', :OLD.IDMUNICIPIO, 'MUNICIPIO', :OLD.MUNICIPIO, NULL, 'VALOR ELIMINADO');
END TRG_BDR_MUNICIPIO;

/*==============================================================*/
/* TRIGGER: PAIS                                                */
/*==============================================================*/

/* SECUENCIA DE PK TABLA PAIS*/
CREATE TRIGGER TRG_BIR_PAIS
BEFORE INSERT ON PAIS
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES_IDPAIS>>
  BEGIN
    IF INSERTING AND :NEW.IDPAIS IS NULL THEN
      SELECT SEQ_IDPAIS.NEXTVAL INTO :NEW.IDPAIS FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END TRG_BIR_PAIS;

/* SEGURIDAD DE LA TABLA PAIS*/
CREATE TRIGGER TRG_BIU_PAIS
BEFORE INSERT OR UPDATE ON PAIS
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW
BEGIN
    IF INSERTING THEN
		:NEW.CREADO := SYSDATE;
        :NEW.CREADO_POR := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),USER);
    END IF;
    :NEW.ACTUALIZADO := SYSDATE;
    :NEW.ACTUALIZADO_POR := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),USER);
END TRG_BIU_PAIS;

/* SEGURIDAD GLOBAL POR VALORES DE ACTUALIZACION TABLA PAIS*/
CREATE OR REPLACE TRIGGER TRG_BUR_PAIS
BEFORE UPDATE ON PAIS
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'PAIS', :OLD.IDPAIS, 'PAIS', :OLD.PAIS, :NEW.PAIS);
END TRG_BUR_PAIS;

CREATE OR REPLACE TRIGGER TRG_BDR_PAIS
BEFORE DELETE ON PAIS
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'PAIS', :OLD.IDPAIS, 'IDPAIS', :OLD.IDPAIS, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'PAIS', :OLD.IDPAIS, 'PAIS', :OLD.PAIS, NULL, 'VALOR ELIMINADO');
END TRG_BDR_PAIS;

/*==============================================================*/
/* TRIGGER: PERSONA                                             */
/*==============================================================*/

/* SECUENCIA DE PK TABLA PERSONA*/
CREATE TRIGGER TRG_BIR_PERSONA
BEFORE INSERT ON PERSONA
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES_IDPERSONA>>
  BEGIN
    IF INSERTING AND :NEW.IDPERSONA IS NULL THEN
      SELECT SEQ_IDPERSONA.NEXTVAL INTO :NEW.IDPERSONA FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END TRG_BIR_PERSONA;

/* SEGURIDAD DE LA TABLA PERSONA*/
CREATE TRIGGER TRG_BIU_PERSONA
BEFORE INSERT OR UPDATE ON PERSONA
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW
BEGIN
    IF INSERTING THEN
		:NEW.CREADO := SYSDATE;
        :NEW.CREADO_POR := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),USER);
    END IF;
    :NEW.ACTUALIZADO := SYSDATE;
    :NEW.ACTUALIZADO_POR := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),USER);
END TRG_BIU_PERSONA;

/* SEGURIDAD GLOBAL POR VALORES DE ACTUALIZACION TABLA PERSONA*/
CREATE OR REPLACE TRIGGER TRG_BUR_PERSONA
BEFORE UPDATE ON PERSONA
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'PERSONA', :OLD.IDPERSONA, 'NOMBRE1', :OLD.NOMBRE1, :NEW.NOMBRE1);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'PERSONA', :OLD.IDPERSONA, 'NOMBRE2', :OLD.NOMBRE2, :NEW.NOMBRE2);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'PERSONA', :OLD.IDPERSONA, 'NOMBRE3', :OLD.NOMBRE3, :NEW.NOMBRE3);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'PERSONA', :OLD.IDPERSONA, 'APELLIDO1', :OLD.APELLIDO1, :NEW.APELLIDO1);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'PERSONA', :OLD.IDPERSONA, 'APELLIDO2', :OLD.APELLIDO2, :NEW.APELLIDO2);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'PERSONA', :OLD.IDPERSONA, 'APECASADA', :OLD.APECASADA, :NEW.APECASADA);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'PERSONA', :OLD.IDPERSONA, 'FECHA_NACIMIENTO', :OLD.FECHA_NACIMIENTO, :NEW.FECHA_NACIMIENTO);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'PERSONA', :OLD.IDPERSONA, 'GENERO', :OLD.GENERO, :NEW.GENERO);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'PERSONA', :OLD.IDPERSONA, 'TELEFONO', :OLD.TELEFONO, :NEW.TELEFONO);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'PERSONA', :OLD.IDPERSONA, 'EMAIL', :OLD.EMAIL, :NEW.EMAIL);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'PERSONA', :OLD.IDPERSONA, 'ESTADOCIVIL', :OLD.ESTADOCIVIL, :NEW.ESTADOCIVIL);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'PERSONA', :OLD.IDPERSONA, 'DPI', :OLD.DPI, :NEW.DPI);
END TRG_BUR_PERSONA;

CREATE OR REPLACE TRIGGER TRG_BDR_PERSONA
BEFORE DELETE ON PERSONA
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'PERSONA', :OLD.IDPERSONA, 'NOMBRE1', :OLD.NOMBRE1, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'PERSONA', :OLD.IDPERSONA, 'NOMBRE2', :OLD.NOMBRE2, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'PERSONA', :OLD.IDPERSONA, 'NOMBRE3', :OLD.NOMBRE3, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'PERSONA', :OLD.IDPERSONA, 'APELLIDO1', :OLD.APELLIDO1, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'PERSONA', :OLD.IDPERSONA, 'APELLIDO2', :OLD.APELLIDO2, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'PERSONA', :OLD.IDPERSONA, 'APECASADA', :OLD.APECASADA, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'PERSONA', :OLD.IDPERSONA, 'FECHA_NACIMIENTO', :OLD.FECHA_NACIMIENTO, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'PERSONA', :OLD.IDPERSONA, 'GENERO', :OLD.GENERO, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'PERSONA', :OLD.IDPERSONA, 'TELEFONO', :OLD.TELEFONO, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'PERSONA', :OLD.IDPERSONA, 'EMAIL', :OLD.EMAIL, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'PERSONA', :OLD.IDPERSONA, 'ESTADOCIVIL', :OLD.ESTADOCIVIL, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'PERSONA', :OLD.IDPERSONA, 'DPI', :OLD.DPI, NULL, 'VALOR ELIMINADO');
END TRG_BDR_PERSONA;

/*==============================================================*/
/* TRIGGER: PRODUCTO                                             */
/*==============================================================*/

/* SECUENCIA DE PK TABLA PRODUCTO*/
CREATE TRIGGER TRG_BIR_PRODUCTO
BEFORE INSERT ON PRODUCTO
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES_IDPRODUCTO>>
  BEGIN
    IF INSERTING AND :NEW.IDPRODUCTO IS NULL THEN
      SELECT SEQ_IDPRODUCTO.NEXTVAL INTO :NEW.IDPRODUCTO FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END TRG_BIR_PRODUCTO;

/* SEGURIDAD GLOBAL POR VALORES DE ACTUALIZACION TABLA PRODUCTO*/
CREATE OR REPLACE TRIGGER TRG_BUR_PRODUCTO
BEFORE UPDATE ON PRODUCTO
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'PRODUCTO', :OLD.IDPRODUCTO, 'NOMBREPRODUCTO', :OLD.NOMBREPRODUCTO, :NEW.NOMBREPRODUCTO);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'PRODUCTO', :OLD.IDPRODUCTO, 'STOCK', :OLD.STOCK, :NEW.STOCK);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'PRODUCTO', :OLD.IDPRODUCTO, 'DESCRIPCION', :OLD.DESCRIPCION, :NEW.DESCRIPCION);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'PRODUCTO', :OLD.IDPRODUCTO, 'SKU', :OLD.SKU, :NEW.SKU);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'PRODUCTO', :OLD.IDPRODUCTO, 'UNIDAD', :OLD.UNIDAD, :NEW.UNIDAD);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'PRODUCTO', :OLD.IDPRODUCTO, 'PRECIOUNIDAD', :OLD.PRECIOUNIDAD, :NEW.PRECIOUNIDAD);
END TRG_BUR_PRODUCTO;

CREATE OR REPLACE TRIGGER TRG_BDR_PRODUCTO
BEFORE DELETE ON PRODUCTO
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'PRODUCTO', :OLD.IDPRODUCTO, 'NOMBREPRODUCTO', :OLD.NOMBREPRODUCTO, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'PRODUCTO', :OLD.IDPRODUCTO, 'STOCK', :OLD.STOCK, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'PRODUCTO', :OLD.IDPRODUCTO, 'DESCRIPCION', :OLD.DESCRIPCION, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'PRODUCTO', :OLD.IDPRODUCTO, 'SKU', :OLD.SKU, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'PRODUCTO', :OLD.IDPRODUCTO, 'UNIDAD', :OLD.UNIDAD, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'PRODUCTO', :OLD.IDPRODUCTO, 'PRECIOUNIDAD', :OLD.PRECIOUNIDAD, NULL, 'VALOR ELIMINADO');
END TRG_BDR_PRODUCTO;

/*==============================================================*/
/* TRIGGER: PROMOCION                                             */
/*==============================================================*/

/* SECUENCIA DE PK TABLA PROMOCION*/
CREATE TRIGGER TRG_BIR_PROMOCION
BEFORE INSERT ON PROMOCION
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES_IDPROMO>>
  BEGIN
    IF INSERTING AND :NEW.IDPROMO IS NULL THEN
      SELECT SEQ_IDPROMO.NEXTVAL INTO :NEW.IDPROMO FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END TRG_BIR_PROMOCION;

/* SEGURIDAD DE LA TABLA PROMOCION*/
CREATE TRIGGER TRG_BIU_PROMOCION
BEFORE INSERT OR UPDATE ON PROMOCION
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW
BEGIN
    IF INSERTING THEN
		:NEW.CREADO := SYSDATE;
        :NEW.CREADO_POR := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),USER);
    END IF;
    :NEW.ACTUALIZADO := SYSDATE;
    :NEW.ACTUALIZADO_POR := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),USER);
END TRG_BIU_PROMOCION;

/* SEGURIDAD GLOBAL POR VALORES DE ACTUALIZACION TABLA PROMOCION*/
CREATE OR REPLACE TRIGGER TRG_BUR_PROMOCION
BEFORE UPDATE ON PROMOCION
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'PROMOCION', :OLD.IDPROMO, 'NOMBREPROMO', :OLD.NOMBREPROMO, :NEW.NOMBREPROMO);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'PROMOCION', :OLD.IDPROMO, 'CODIGO', :OLD.CODIGO, :NEW.CODIGO);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'PROMOCION', :OLD.IDPROMO, 'FECHAINICIO', :OLD.FECHAINICIO, :NEW.FECHAINICIO);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'PROMOCION', :OLD.IDPROMO, 'FECHAFIN', :OLD.FECHAFIN, :NEW.FECHAFIN);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'PROMOCION', :OLD.IDPROMO, 'PORCEPROMO', :OLD.PORCEPROMO, :NEW.PORCEPROMO);
END TRG_BUR_PROMOCION;

CREATE OR REPLACE TRIGGER TRG_BDR_PROMOCION
BEFORE DELETE ON PROMOCION
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'PROMOCION', :OLD.IDPROMO, 'NOMBREPROMO', :OLD.NOMBREPROMO,  NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'PROMOCION', :OLD.IDPROMO, 'CODIGO', :OLD.CODIGO, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'PROMOCION', :OLD.IDPROMO, 'FECHAINICIO', :OLD.FECHAINICIO, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'PROMOCION', :OLD.IDPROMO, 'FECHAFIN', :OLD.FECHAFIN, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'PROMOCION', :OLD.IDPROMO, 'PORCEPROMO', :OLD.PORCEPROMO, NULL, 'VALOR ELIMINADO');
END TRG_BDR_PROMOCION;

/*==============================================================*/
/* TRIGGER: SUCURSAL                                            */
/*==============================================================*/

/* SECUENCIA DE PK TABLA SUCURSAL*/
CREATE TRIGGER TRG_BIR_SUCURSAL
BEFORE INSERT ON SUCURSAL
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES_IDPROMO>>
  BEGIN
    IF INSERTING AND :NEW.IDSUCURSAL IS NULL THEN
      SELECT SEQ_IDSUCURSAL.NEXTVAL INTO :NEW.IDSUCURSAL FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END TRG_BIR_SUCURSAL;

/* SEGURIDAD DE LA TABLA SUCURSAL*/
CREATE TRIGGER TRG_BIU_SUCURSAL
BEFORE INSERT OR UPDATE ON SUCURSAL
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW
BEGIN
    IF INSERTING THEN
		:NEW.CREADO := SYSDATE;
        :NEW.CREADO_POR := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),USER);
    END IF;
    :NEW.ACTUALIZADO := SYSDATE;
    :NEW.ACTUALIZADO_POR := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),USER);
END TRG_BIU_SUCURSAL;

/* SEGURIDAD GLOBAL POR VALORES DE ACTUALIZACION TABLA SUCURSAL*/
CREATE OR REPLACE TRIGGER TRG_BUR_SUCURSAL
BEFORE UPDATE ON SUCURSAL
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'SUCURSAL', :OLD.IDSUCURSAL, 'SUCURSAL', :OLD.SUCURSAL, :NEW.SUCURSAL);
	
END TRG_BUR_SUCURSAL;

CREATE OR REPLACE TRIGGER TRG_BDR_SUCURSAL
BEFORE DELETE ON SUCURSAL
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'SUCURSAL', :OLD.IDSUCURSAL, 'IDSUCURSAL', :OLD.IDSUCURSAL,  NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'SUCURSAL', :OLD.IDSUCURSAL, 'SUCURSAL', :OLD.SUCURSAL, NULL, 'VALOR ELIMINADO');
END TRG_BDR_SUCURSAL;

/*==============================================================*/
/* TRIGGER: USUARIO                                            */
/*==============================================================*/

/* SECUENCIA DE PK TABLA USUARIO*/
CREATE TRIGGER TRG_BIR_USUARIO
BEFORE INSERT ON USUARIO
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES_IDPROMO>>
  BEGIN
    IF INSERTING AND :NEW.IDUSUARIO IS NULL THEN
      SELECT SEQ_IDUSUARIO.NEXTVAL INTO :NEW.IDUSUARIO FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END TRG_BIR_USUARIO;

/* SEGURIDAD GLOBAL POR VALORES DE ACTUALIZACION TABLA USUARIO*/
CREATE OR REPLACE TRIGGER TRG_BUR_USUARIO
BEFORE UPDATE ON USUARIO
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'USUARIO', :OLD.IDUSUARIO, 'IDEMPLEADO', :OLD.IDEMPLEADO, :NEW.IDEMPLEADO);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'USUARIO', :OLD.IDUSUARIO, 'IDSUCURSAL', :OLD.IDSUCURSAL, :NEW.IDSUCURSAL);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'USUARIO', :OLD.IDUSUARIO, 'USUARIO', :OLD.USUARIO, :NEW.USUARIO);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'USUARIO', :OLD.IDUSUARIO, 'PW', :OLD.PW, :NEW.PW);	
END TRG_BUR_USUARIO;

CREATE OR REPLACE TRIGGER TRG_BDR_USUARIO
BEFORE DELETE ON USUARIO
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'USUARIO', :OLD.IDUSUARIO, 'IDEMPLEADO', :OLD.IDEMPLEADO,  NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'USUARIO', :OLD.IDUSUARIO, 'IDSUCURSAL', :OLD.USUARIO, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'USUARIO', :OLD.IDUSUARIO, 'USUARIO', :OLD.USUARIO,  NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'USUARIO', :OLD.IDUSUARIO, 'PW', :OLD.PW, NULL, 'VALOR ELIMINADO');
END TRG_BDR_USUARIO;


/*==============================================================*/
/* TRIGGER: VENTA                                               */
/*==============================================================*/

/* SECUENCIA DE PK TABLA VENTA*/
CREATE TRIGGER TRG_BIR_VENTA
BEFORE INSERT ON VENTA
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES_IDVENTA>>
  BEGIN
    IF INSERTING AND :NEW.IDVENTA IS NULL THEN
      SELECT SEQ_IDVENTA.NEXTVAL INTO :NEW.IDVENTA FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END TRG_BIR_VENTA;

/* SEGURIDAD DE LA TABLA VENTA*/
CREATE TRIGGER TRG_BIU_VENTA
BEFORE INSERT OR UPDATE ON VENTA
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW
BEGIN
    IF INSERTING THEN
		:NEW.CREADO := SYSDATE;
        :NEW.CREADO_POR := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),USER);
    END IF;
    :NEW.ACTUALIZADO := SYSDATE;
    :NEW.ACTUALIZADO_POR := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),USER);
END TRG_BIU_VENTA;

/* SEGURIDAD GLOBAL POR VALORES DE ACTUALIZACION TABLA VENTA*/
CREATE OR REPLACE TRIGGER TRG_BUR_VENTA
BEFORE UPDATE ON VENTA
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'VENTA', :OLD.IDVENTA, 'IDPRODUCTO', :OLD.IDPRODUCTO, :NEW.IDPRODUCTO);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'VENTA', :OLD.IDVENTA, 'IDPROMO', :OLD.IDPROMO, :NEW.IDPROMO);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'VENTA', :OLD.IDVENTA, 'IDCANAL', :OLD.IDCANAL, :NEW.IDCANAL);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'VENTA', :OLD.IDVENTA, 'IDCLIENTE', :OLD.IDCLIENTE, :NEW.IDCLIENTE);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'VENTA', :OLD.IDVENTA, 'FECHAVENTA', :OLD.FECHAVENTA, :NEW.FECHAVENTA);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'VENTA', :OLD.IDVENTA, 'CANTIDAD', :OLD.CANTIDAD, :NEW.CANTIDAD);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'VENTA', :OLD.IDVENTA, 'PRECIOUNIDAD', :OLD.PRECIOUNIDAD, :NEW.PRECIOUNIDAD);
	
END TRG_BUR_VENTA;

CREATE OR REPLACE TRIGGER TRG_BDR_VENTA
BEFORE DELETE ON VENTA
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'VENTA', :OLD.IDVENTA, 'IDPRODUCTO', :OLD.IDPRODUCTO, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'VENTA', :OLD.IDVENTA, 'IDPROMO', :OLD.IDPROMO, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'VENTA', :OLD.IDVENTA, 'IDCANAL', :OLD.IDCANAL, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'VENTA', :OLD.IDVENTA, 'IDCLIENTE', :OLD.IDCLIENTE, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'VENTA', :OLD.IDVENTA, 'FECHAVENTA', :OLD.FECHAVENTA, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'VENTA', :OLD.IDVENTA, 'CANTIDAD', :OLD.CANTIDAD, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'VENTA', :OLD.IDVENTA, 'PRECIOUNIDAD', :OLD.PRECIOUNIDAD, NULL, 'VALOR ELIMINADO');
END TRG_BDR_VENTA;

/*==============================================================*/
/* TRIGGER: ZONA                                                */
/*==============================================================*/

/* SECUENCIA DE PK TABLA ZONA*/
CREATE TRIGGER TRG_BIR_ZONA
BEFORE INSERT ON ZONA
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
  <<COLUMN_SEQUENCES_IDZONA>>
  BEGIN
    IF INSERTING AND :NEW.IDZONA IS NULL THEN
      SELECT SEQ_IDZONA.NEXTVAL INTO :NEW.IDZONA FROM SYS.DUAL;
    END IF;
  END COLUMN_SEQUENCES;
END TRG_BIR_ZONA;

/* SEGURIDAD DE LA TABLA ZONA*/
CREATE TRIGGER TRG_BIU_ZONA
BEFORE INSERT OR UPDATE ON ZONA
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW
BEGIN
    IF INSERTING THEN
		:NEW.CREADO := SYSDATE;
        :NEW.CREADO_POR := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),USER);
    END IF;
    :NEW.ACTUALIZADO := SYSDATE;
    :NEW.ACTUALIZADO_POR := NVL(SYS_CONTEXT('APEX$SESSION','APP_USER'),USER);
END TRG_BIU_ZONA;

/* SEGURIDAD GLOBAL POR VALORES DE ACTUALIZACION TABLA ZONA*/
CREATE OR REPLACE TRIGGER TRG_BUR_ZONA
BEFORE UPDATE ON ZONA
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'ZONA', :OLD.IDZONA, 'IDMUNICIPIO', :OLD.IDMUNICIPIO, :NEW.IDMUNICIPIO);
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO)
	VALUES (SYSDATE, USER, 'ZONA', :OLD.IDZONA, 'ZONA', :OLD.ZONA, :NEW.ZONA);	
END TRG_BUR_ZONA;

CREATE OR REPLACE TRIGGER TRG_BDR_ZONA
BEFORE DELETE ON ZONA
REFERENCING OLD AS OLD
NEW AS NEW
FOR EACH ROW 
BEGIN
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'ZONA', :OLD.IDZONA, 'IDMUNICIPIO', :OLD.IDMUNICIPIO, NULL, 'VALOR ELIMINADO');
	INSERT INTO BITACORA(FECHA, USUARIO, NOMBRETABLA, LLAVE, NOMBRECAMPO, VALORANTERIOR, VALORNUEVO, OBSERVACIONES)
	VALUES (SYSDATE, USER, 'ZONA', :OLD.IDZONA, 'ZONA', :OLD.ZONA, NULL, 'VALOR ELIMINADO');
END TRG_BDR_ZONA;

ALTER TABLE DEPARTAMENTO ADD UNIQUE (DEPARTAMENTO);
ALTER TABLE ESPECIALIDADES ADD UNIQUE (ESPECIALIDADES);
ALTER TABLE ESTADO ADD UNIQUE (ESTADO);
ALTER TABLE PAIS ADD UNIQUE (PAIS);
ALTER TABLE PERSONA ADD UNIQUE (DPI);
ALTER TABLE PERSONA ADD UNIQUE (NIT);
ALTER TABLE SUCURSAL ADD UNIQUE (SUCURSAL);
ALTER TABLE USUARIO ADD UNIQUE (USUARIO);